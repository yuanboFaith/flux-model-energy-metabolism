# plot
d.bodyComposition.tidy %>%
# calculate fraction of fat and lean
d.bodyComposition.summary <- d.bodyComposition %>%
mutate(sum = fat + lean,
fat.frac = fat/sum,
lean.frac = lean / sum) %>%
group_by(phenotype) %>%
summarise(across(contains("frac"),
.fn = list(
mean = ~ mean(.x, na.rm = T), # calcualte the mean
sd = ~ sd(.x, na.rm = T))))  # calculate standard deviation
d.bodyComposition %>%
mutate(sum = fat + lean,
fat.frac = fat/sum,
lean.frac = lean / sum) %>%
group_by(phenotype)
rm(list=ls())
library(ComplexHeatmap)
library(scales) # for color scale
library(mgcv)
library(ggpmisc)
library(ggbeeswarm)
library(readxl)
library(RColorBrewer)
library(viridis)
library(ggsci)
library(rebus)
library(matrixStats)
library(limSolve)
library(xlsx)
library(cowplot)
library(rstatix)
library(ggpubr)
library(tidyverse)
load("/Users/boyuan/Desktop/Harvard/Manuscript/1. fluxomics/raw data/8_core_flux extrapolation.RData")
# dataset of body composition by MRI
d.bodyComposition <- read_excel("/Users/boyuan/Desktop/Harvard/Manuscript/1. fluxomics/raw data/body composition.xlsx")
# mean and SD of mass of fat and lean tissues
d.bodyComposition.tidy <- d.bodyComposition %>%
group_by(phenotype) %>%
summarise(across(c(fat, lean),
.fn = list(mean = ~mean(.x), sd = ~sd(.x)))
) %>%
pivot_longer(-phenotype, names_sep = "_",
names_to = c("part", ".value"))
# plot
d.bodyComposition.tidy
# calculate fraction of fat and lean
d.bodyComposition.summary <- d.bodyComposition %>%
mutate(sum = fat + lean,
fat.frac = fat/sum,
lean.frac = lean / sum) %>%
group_by(phenotype) %>%
summarise(across(contains("frac"),
.fn = list(
mean = ~ mean(.x, na.rm = T), # calcualte the mean
sd = ~ sd(.x, na.rm = T))))  # calculate standard deviation
# tidy up
d.bodyComposition.summary.tidy <- d.bodyComposition.summary %>%
pivot_longer(-phenotype, names_to = c("part", ".value"), names_sep = "_") %>%
group_by(phenotype) %>%
arrange(desc(part)) %>%
mutate(y.error = cumsum(mean))
# plot of distribution fraction
d.bodyComposition.summary.tidy %>%
ggplot(aes(x = phenotype, y = mean, fill = part)) +
geom_col(color = "black") +
geom_errorbar(aes(ymin = y.error - sd, ymax = y.error),
width = .3)
load("/Users/boyuan/Desktop/Harvard/Manuscript/1. fluxomics/raw data/8_core_flux extrapolation.RData")
# dataset of body composition by MRI
d.bodyComposition <- read_excel("/Users/boyuan/Desktop/Harvard/Manuscript/1. fluxomics/raw data/body composition.xlsx")
# mean and SD of mass of fat and lean tissues
d.bodyComposition.tidy <- d.bodyComposition %>%
group_by(phenotype) %>%
summarise(across(c(fat, lean),
.fn = list(mean = ~mean(.x), sd = ~sd(.x)))
) %>%
pivot_longer(-phenotype, names_sep = "_",
names_to = c("part", ".value"))
# plot
d.bodyComposition.tidy
# plot
d.bodyComposition.tidy
d.bodyComposition.tidy
# mean and SD of mass of fat and lean tissues
d.bodyComposition.tidy <- d.bodyComposition %>%
group_by(phenotype) %>%
summarise(across(c(fat, lean),
.fn = list(mean = ~mean(.x), sd = ~sd(.x)))
) %>%
pivot_longer(-phenotype, names_sep = "_",
names_to = c("part", ".value")) %>%
# error bar position
group_by(phenotype) %>%
mutate(y.error = cumsum(mean))
# plot
d.bodyComposition.tidy %>%
ggplot(aes(x = phenotype, y = mean, fill = part)) +
geom_col() +
geom_errorbar(aes(ymin = y.error - sd, ymax = y.error),
width = .3)
# mean and SD of mass of fat and lean tissues
d.bodyComposition.tidy <- d.bodyComposition %>%
group_by(phenotype) %>%
summarise(across(c(fat, lean),
.fn = list(mean = ~mean(.x), sd = ~sd(.x)))
) %>%
pivot_longer(-phenotype, names_sep = "_",
names_to = c("part", ".value")) %>%
# error bar position
group_by(phenotype) %>%
arrange(desc(part)) %>%
mutate(y.error = cumsum(mean))
# plot
d.bodyComposition.tidy %>%
ggplot(aes(x = phenotype, y = mean, fill = part)) +
geom_col() +
geom_errorbar(aes(ymin = y.error - sd, ymax = y.error),
width = .3)
# plot
d.bodyComposition.tidy %>%
ggplot(aes(x = phenotype, y = mean, fill = part)) +
geom_col(color = "black") +
geom_errorbar(aes(ymin = y.error - sd, ymax = y.error),
width = .3)
d.bodyComposition
# dataset of body composition by MRI
d.bodyComposition <- read_excel(
"/Users/boyuan/Desktop/Harvard/Manuscript/1. fluxomics/raw data/body composition.xlsx") %>%
mutate(phenotype = factor(phenotype, levels = ordered.phenotype))
# mean and SD of mass of fat and lean tissues
d.bodyComposition.tidy <- d.bodyComposition %>%
group_by(phenotype) %>%
summarise(across(c(fat, lean),
.fn = list(mean = ~mean(.x), sd = ~sd(.x)))
) %>%
pivot_longer(-phenotype, names_sep = "_",
names_to = c("part", ".value")) %>%
# error bar position
group_by(phenotype) %>%
arrange(desc(part)) %>%
mutate(y.error = cumsum(mean))
# plot
d.bodyComposition.tidy %>%
ggplot(aes(x = phenotype, y = mean, fill = part)) +
geom_col(color = "black") +
geom_errorbar(aes(ymin = y.error - sd, ymax = y.error),
width = .3)
# calculate fraction of fat and lean
d.bodyComposition.summary <- d.bodyComposition %>%
mutate(sum = fat + lean,
fat.frac = fat/sum,
lean.frac = lean / sum) %>%
group_by(phenotype) %>%
summarise(across(contains("frac"),
.fn = list(
mean = ~ mean(.x, na.rm = T), # calcualte the mean
sd = ~ sd(.x, na.rm = T))))  # calculate standard deviation
# tidy up
d.bodyComposition.summary.tidy <- d.bodyComposition.summary %>%
pivot_longer(-phenotype, names_to = c("part", ".value"), names_sep = "_") %>%
group_by(phenotype) %>%
arrange(desc(part)) %>%
mutate(y.error = cumsum(mean))
# plot of distribution fraction
d.bodyComposition.summary.tidy %>%
ggplot(aes(x = phenotype, y = mean, fill = part)) +
geom_col(color = "black") +
geom_errorbar(aes(ymin = y.error - sd, ymax = y.error),
width = .3)
# plot
d.bodyComposition.tidy %>%
ggplot(aes(x = phenotype, y = mean, fill = part)) +
geom_col(color = "black") +
geom_errorbar(aes(ymin = y.error - sd, ymax = y.error),
width = .3)
# plot
d.bodyComposition.tidy %>%
ggplot(aes(x = phenotype, y = mean, fill = part)) +
geom_col(color = "black") +
geom_errorbar(aes(ymin = y.error - sd, ymax = y.error),
width = .3) +
theme.myClassic
# plot
d.bodyComposition.tidy %>%
ggplot(aes(x = phenotype, y = mean, fill = part)) +
geom_col(color = "black") +
geom_errorbar(aes(ymin = y.error - sd, ymax = y.error),
width = .3) +
theme.myClassic()
# plot
d.bodyComposition.tidy %>%
ggplot(aes(x = phenotype, y = mean, fill = part)) +
geom_col(color = "black") +
geom_errorbar(aes(ymin = y.error - sd, ymax = y.error),
width = .3) +
theme.mybw
rm(list=ls())
library(ComplexHeatmap)
library(scales) # for color scale
library(mgcv)
library(ggpmisc)
library(ggbeeswarm)
library(readxl)
library(RColorBrewer)
library(viridis)
library(ggsci)
library(rebus)
library(matrixStats)
library(limSolve)
library(xlsx)
library(cowplot)
library(rstatix)
library(ggpubr)
library(tidyverse)
load("/Users/boyuan/Desktop/Harvard/Manuscript/1. fluxomics/raw data/8_core_flux extrapolation.RData")
# dataset of body composition by MRI
d.bodyComposition <- read_excel(
"/Users/boyuan/Desktop/Harvard/Manuscript/1. fluxomics/raw data/body composition.xlsx") %>%
mutate(phenotype = factor(phenotype, levels = ordered.phenotype))
# mean and SD of mass of fat and lean tissues
d.bodyComposition.tidy <- d.bodyComposition %>%
group_by(phenotype) %>%
summarise(across(c(fat, lean),
.fn = list(mean = ~mean(.x), sd = ~sd(.x)))
) %>%
pivot_longer(-phenotype, names_sep = "_",
names_to = c("part", ".value")) %>%
# error bar position
group_by(phenotype) %>%
arrange(desc(part)) %>%
mutate(y.error = cumsum(mean))
# plot
d.bodyComposition.tidy %>%
ggplot(aes(x = phenotype, y = mean, fill = part)) +
geom_col(color = "black") +
geom_errorbar(aes(ymin = y.error - sd, ymax = y.error),
width = .3) +
theme.mybw
rm(list=ls())
library(ComplexHeatmap)
library(scales) # for color scale
library(mgcv)
library(ggpmisc)
library(ggbeeswarm)
library(readxl)
library(RColorBrewer)
library(viridis)
library(ggsci)
library(rebus)
library(matrixStats)
library(limSolve)
library(xlsx)
library(cowplot)
library(rstatix)
library(ggpubr)
library(tidyverse)
load("/Users/boyuan/Desktop/Harvard/Manuscript/1. fluxomics/raw data/7_core_production_flux.RData")
options(dplyr.print_max = 4)
options(dplyr.print_max = 4)
# import amino acid basics
path.aa <- "/Users/boyuan/Desktop/Harvard/Manuscript/1. fluxomics/raw data/amino acid basics.xlsx"
d.aa <- read_excel(path.aa, sheet = "AA.basics")
d.aa$C.number <- d.aa$C.number %>% as.double()
# define function to count amino acid frequency in a protein
func.AA.count <- function(aminoAcid.sequence, whichProtein){
# split
seq.splitted = str_split(aminoAcid.sequence, pattern = "")[[1]]
# count
seq.count = table(seq.splitted) / length(seq.splitted) * 100
# organize into a data frame
t <- tibble(Abbreviation_2 = names(seq.count),
percent = c(seq.count))
colnames(t)[2] <- whichProtein
return(t)
}
# mouse myosin 1: Q5SX40 Â· MYH1_MOUSE : https://www.uniprot.org/uniprotkb/Q5SX40/entry#sequences
s1 <- "MSSDAEMAVFGEAAPYLRKSEKERIEAQNKPFDAKSSVFVVDAKESFVKATVQSREGGKVTAKTEGGTTVTVKDDQVYPMNPPKYDKIEDMAMMTHLHEPAVLYNLKERYAAWMIYTYSGLFCVTVNPYKWLPVYNAEVVAAYRGKKRQEAPPHIFSISDNAYQFMLTDRENQSILITGESGAGKTVNTKRVIQYFATIAVTGEKKKEEATSGKMQGTLEDQIISANPLLEAFGNAKTVRNDNSSRFGKFIRIHFGTTGKLASADIETYLLEKSRVTFQLKAERSYHIFYQIMSNKKPDLIEMLLITTNPYDYAFVSQGEITVPSIDDQEELMATDSAIDILGFTSDERVSIYKLTGAVMHYGNMKFKQKQREEQAEPDGTEVADKAAYLQNLNSADLLKALCYPRVKVGNEYVTKGQTVQQVYNSVGALAKAVYEKMFLWMVTRINQQLDTKQPRQYFIGVLDIAGFEIFDFNSLEQLCINFTNEKLQQFFNHHMFVLEQEEYKKEGIEWEFIDFGMDLAACIELIEKPMGIFSILEEECMFPKATDTSFKNKLYEQHLGKSNNFQKPKPAKGKVEAHFSLVHYAGTVDYNIAGWLDKNKDPLNETVVGLYQKSSMKTLAYLFSGAAAAAEAESGGGGGKKGAKKKGSSFQTVSALFRENLNKLMTNLRSTHPHFVRCIIPNETKTPGAMEHELVLHQLRCNGVLEGIRICRKGFPSRILYADFKQRYKVLNASAIPEGQFIDSKKASEKLLGSIDIDHTQYKFGHTKVFFKAGLLGLLEEMRDDKLAQLITRTQAMCRGYLARVEYQKMVERRESIFCIQYNVRAFMNVKHWPWMKLYFKIKPLLKSAETEKEMANMKEEFEKAKENLAKAEAKRKELEEKMVALMQEKNDLQLQVQSEADSLADAEERCDQLIKTKIQLEAKIKEVTERAEDEEEINAELTAKKRKLEDECSELKKDIDDLELTLAKVEKEKHATENKVKNLTEEMAGLDETIAKLTKEKKALQEAHQQTLDDLQAEEDKVNTLTKAKIKLEQQVDDLEGSLEQEKKIRMDLERAKRKLEGDLKLAQESTMDVENDKQQLDEKLKKKEFEMSNLQSKIEDEQALGMQLQKKIKELQARIEELEEEIEAERASRAKAEKQRSDLSRELEEISERLEEAGGATSAQIEMNKKREAEFQKMRRDLEEATLQHEATAATLRKKHADSVAELGEQIDNLQRVKQKLEKEKSEMKMEIDDLASNMEVISKSKGNLEKMCRTLEDQVSELKTKEEEQQRLINELTAQRGRLQTESGEYSRQLDEKDSLVSQLSRGKQAFTQQIEELKRQLEEEIKAKSALAHALQSSRHDCDLLREQYEEEQEAKAELQRAMSKANSEVAQWRTKYETDAIQRTEELEEAKKKLAQRLQDAEEHVEAVNAKCASLEKTKQRLQNEVEDLMIDVERTNAACAALDKKQRNFDKILAEWKQKYEETHAELEASQKESRSLSTELFKIKNAYEESLDHLETLKRENKNLQQEISDLTEQIAEGGKRIHELEKIKKQIEQEKSELQAALEEAEASLEHEEGKILRIQLELNQVKSEIDRKIAEKDEEIDQLKRNHIRVVESMQSTLDAEIRSRNDAIRLKKKMEGDLNEMEIQLNHSNRMAAEALRNYRNTQGILKDTQLHLDDALRGQEDLKEQLAMVERRANLLQAEIEELRATLEQTERSRKIAEQELLDASERVQLLHTQNTSLINTKKKLETDISQIQGEMEDIVQEARNAEEKAKKAITDAAMMAEELKKEQDTSAHLERMKKNLEQTVKDLQHRLDEAEQLALKGGKKQIQKLEARVRELEGEVENEQKRNVEAIKGLRKHERRVKELTYQTEEDRKNVLRLQDLVDKLQSKVKAYKRQAEEAEEQSNVNLAKFRKIQHELEEAEERADIAESQVNKLRVKSREVHTKIISEE"
s1 <- func.AA.count(aminoAcid.sequence = s1, whichProtein = "myosin I")
# mouse actin in sckeletal muscle : P68134 Â· ACTS_MOUSE : https://www.uniprot.org/uniprotkb/P68134/entry#sequences
s2 <- "MCDEDETTALVCDNGSGLVKAGFAGDDAPRAVFPSIVGRPRHQGVMVGMGQKDSYVGDEAQSKRGILTLKYPIEHGIITNWDDMEKIWHHTFYNELRVAPEEHPTLLTEAPLNPKANREKMTQIMFETFNVPAMYVAIQAVLSLYASGRTTGIVLDSGDGVTHNVPIYEGYALPHAIMRLDLAGRDLTDYLMKILTERGYSFVTTAEREIVRDIKEKLCYVALDFENEMATAASSSSLEKSYELPDGQVITIGNERFRCPETLFQPSFIGMESAGIHETTYNSIMKCDIDIRKDLYANNVMSGGTTMYPGIADRMQKEITALAPSTMKIKIIAPPERKYSVWIGGSILASLSTFQQMWITKQEYDEAGPSIVHRKCF"
s2 <- func.AA.count(aminoAcid.sequence = s2, whichProtein = "actin")
# collagen : Q63870 Â· CO7A1_MOUSE : https://www.uniprot.org/uniprotkb/Q63870/entry#sequences
s3 <- "MRLRLLVAALCAAEILMGAPEVWAQPRDRVTCTRLYAADIVFLLDGSSSIGRSNFREVRGFLEGLVLPFSGAASAQGVRFATVQYSDDPQTEFGLDTLGSGSDTIRAIRELSYKGGNTRTGAALHHVSDRVFLPRLTRPGVPKVCILITDGKSQDLVDTAAQKLKGQGVKLFAVGIKNADPEELKRVASQPTSDFFFFVNDFSILRTLLPLISRRVCTTAGGVPVTLPSDDTPSGPRDLVLSEPSSQSLRVQWTAASGPVTGYKVQYTPLTGLGQPLPSERQEVNIPAGETSTRLQGLRPLTDYQVTVVALYANSIGEAVSGTARTTAKEGLELSLQNITSHSLLVAWRRVPGANGYRVTWRDLSGGPTQQQDLSPGQGSVFLDHLEPGTDYEVTVSALFGHSVGPAASLTARTASSVEQTLHPIILSPTSILLSWNLVPEARGYRLEWRRESGLETPQKVELPPDVTRHQLDGLQPGTEYRLTLYTLLEGREVATPATVVPTGLEQLVSPVMNLQAIELPGQRVRVSWNPVPGATEYRFTVRTTQGVERTLLLPGSQTTFDLDDVRAGLSYTVRVSARVGAQEGDASILTIHRDPEAPLVVPGLRVVASDATRIRVAWGLVPGASGFRISWRTGSGPESSRTLTPDSTVTDILGLQPSTSYQVAVSALRGREEGPPVVIVARTDPLGPVRRVHLTQAGSSSVSITWTGVPGATGYRVSWHSGHGPEKSLLVSGDATVAEIDGLEPDTEYIVRVRTHVAGVDGAPASVVVRTAPEPVGSVSKLQILNASSDVLRVTWVGVPGATSYKLAWGRSEGGPMKHRILPGNKESAEIRDLEGGVSYSVRVTALVGDREGAPVSIVITTPPATPALLETLQVVQSGEHSLRLRWEPVPGAPGFRLHWQPEGGQEQSLTLGPESNSYNLVGLEPATKYQVWLTVLGQTGEGPPRKVTAYTEPSHIPSTELRVVDTSIDSVTLTWTPVSGASSYILSWRPLRGTGQEVPRAPQTLPGTSSSHRVTGLEPGISYVFSLTPIQSGVRGSEISVTQTPACSHGPVDVVFLLHATRDNAHNAEAVRRVLERLVSALGPLGPQAAQVGLLTYSHRPSPLFPLNSSHDLGIILRKIRDIPYVDPSGNNLGTAVTTAHRYLLASNAPGRRQQVPGVMVLLVDEPLRGDILSPIREAQTSGLKVMALSLVGADPEQLRRLAPGTDPIQNFFAVDNGPGLDRAVSDLAVALCQAAVTIEPQTGPCAVHCPKGQKGEPGVTGLQGQAGPPGPPGLPGRTGAPGPQGPPGSTQAKGERGFPGPEGPPGSPGLPGVPGSPGIKGSTGRPGPRGEQGERGPQGPKGEPGEPGQITGGGGPGFPGKKGDPGPSGPPGSRGPVGDPGPRGPPGLPGISVKGDKGDRGERGPPGPGIGASEQGDPGLPGLPGSPGPQGPAGRPGEKGEKGDCEDGGPGLPGQPGPPGEPGLRGAPGMTGPKGDRGLTGTPGEPGVKGERGHPGPVGPQGLPGAAGHPGVEGPEGPPGPTGRRGEKGEPGRPGDPAVGPGGAGAKGEKGEAGLPGPRGASGSKGEQGAPGLALPGDPGPKGDPGDRGPIGLTGRAGPTGDSGPPGEKGEPGRPGSPGPVGPRGRDGEAGEKGDEGIPGEPGLPGKAGERGLRGAPGPRGPVGEKGDQGDPGEDGRNGSPGSSGPKGDRGEPGPPGPPGRLVDAGIESRDKGEPGQEGPRGPKGDPGPPGVSGERGIDGLRGPPGPQGDPGVRGPAGDKGDRGPPGLDGRSGLDGKPGAPGPPGLHGASGKAGDPGRDGLPGLRGEHGPPGPPGPPGVPGKAGDDGKPGLNGKNGDPGDPGEDGRKGEKGDSGAPGREGPDGPKGERGAPGNPGLQGPPGLPGQVGPPGQGFPGVPGITGPKGDRGETGSKGEQGLPGERGLRGEPGSLPNAERLLETAGIKVSALREIVDTWDESSGSFLPVPERRPGPKGDPGDRGPPGKEGLIGFPGERGLKGERGDPGPQGPPGLALGERGPPGPPGLAGEPGKPGIPGLPGRAGGSGEAGRPGERGERGEKGERGDQGRDGLPGLPGPPGPPGPKVAIEEPGPGLAREQGPPGLKGAKGEPGSDGDPGPKGDRGVPGIKGDVGEPGKRGHDGNPGLPGERGVAGPEGKPGLQGPRGTPGPVGSHGDPGPPGAPGLAGPAGPQGPSGLKGEPGETGPPGRGLPGPVGAVGLPGPPGPSGLVGPQGSPGLPGQVGETGKPGPPGRDGSSGKDGDRGSPGVPGSPGLPGPVGPKGEPGPVGAPGQVVVGPPGAKGEKGAPGDLAGALLGEPGAKGDRGLPGPRGEKGEAGRAGGPGDPGEDGQKGAPGLKGLKGEPGIGVQGPPGPSGPPGMKGDLGPPGAPGAPGVVGFPGQTGPRGETGQPGPVGERGLAGPPGREGAPGPLGPPGPPGSAGAPGASGLKGDKGDPGAGLPGPRGERGEPGVRGEDGHPGQEGPRGLVGPPGSRGEQGEKGAAGAAGLKGDKGDSAVIEGPPGPRGAKGDMGERGPRGIDGDKGPRGESGNPGDKGSKGEPGDKGSAGSIGVRGLTGPKGEPGAAGIPGEPGAPGKDGIPGFRGDKGDIGFMGPRGLKGEKGIKGTCGRDGERGDKGEAGFPGRPGLAGKKGDMGEPGLPGQSGAPGKEGLIGPKGDRGFDGQSGPKGDQGEKGERGPPGVGGFPGPRGNDGSSGPPGPPGGVGPKGPEGLQGQKGERGPPGESVVGAPGAPGTPGERGEQGRPGPAGPRGEKGEAALTEDDIRDFVRQEMSQHCACQGQFIASGSRPLPGYAADTAGSQLHHVPVLRVSHVEEEGQVPPEDDDDFSEYSVYSVEDYQEPEVPWDGEAEIKGWDQRGSDLCSLPLDEGSCTAYTLRWYHRAVPGGTACHPFVYGGCGGNANRFGTREACERRCPPQGVHSQKTGAA"
s3 <- func.AA.count(aminoAcid.sequence = s3, whichProtein = "collagen")
s <- left_join(s1, s2) %>% left_join(s3)
# combine with amino acid basics dataset
s.all <- s %>% left_join(d.aa, by = "Abbreviation_2") %>%
select(aminoAcids, C.number, Abbreviation_1, `myosin I`, actin, collagen)
# tidy and calculate carbon percent
s.all.carbon.pct <- s.all %>%
pivot_longer(-c(aminoAcids, C.number, Abbreviation_1), names_to = "protein", values_to = "pct") %>%
group_by(protein) %>%
mutate(pct_C.atom = C.number * pct / sum(C.number * pct) * 100) %>%
# put both molecule and carbon-based fraction into a single column
pivot_longer(contains("pct"), names_to = "base", values_to = "pct") %>%
# mark BCAA
mutate(whichAA = ifelse(aminoAcids %in% (BCAA <- c("Leucine", "Isoleucine", "Valine")), aminoAcids, "others")) %>%
# protein in order
mutate(protein = factor(protein, levels = c("myosin I", "actin", "collagen" )))
s.all.carbon.pct
# summary, grouping non-BCAA together
s.all.carbon.pct.summary <- s.all.carbon.pct %>%
group_by(protein, whichAA, base) %>%
summarise(pct = sum(pct)) %>%
mutate(whichAA = factor(whichAA, levels = c("Valine", "Leucine", "Isoleucine", "others") %>% rev()))
# plot
func.plt.AA <- function(mydata){
mydata %>%
ggplot(aes(protein, y = pct, fill = whichAA)) +
facet_wrap(~base) +
# column border for BCAA only
geom_col(alpha = .7, color = "black") +
# label with percentage
geom_text(aes(label = paste(round(pct, 1), "%")),
position = position_stack(vjust = .5),
hjust = .5) +
theme.myClassic +
scale_y_continuous(expand = expansion(mult = c(0, 0)),
breaks = seq(0, 100, 20)) +
scale_x_discrete(expand = expansion(add = .8)) +
labs(x = NULL, y = "amino acid %") +
scale_fill_manual(values = c("grey90", "orange", "steelblue1", "tomato"))
}
plt.aa.composition <- s.all.carbon.pct.summary %>%
filter(protein != "collagen") %>%
filter(base == "pct") %>%
func.plt.AA() +
theme(legend.position = "bottom") +
guides(fill = guide_legend(nrow = 2)) +
facet_wrap(~"")
plt.aa.composition
rm(list = ls())
library(plyr)
library(rebus)
library(viridis)
library(lubridate)
library(readxl)
library(purrr)
library(broom)
library(RColorBrewer)
library(splines)
library(pryr)
library(cowplot)
library(gridExtra)
library(ggrepel)
library(ggbeeswarm)
library(scales)
library(ggsci)
library(tidyverse)
load("/Users/boyuan/Desktop/Harvard/Manuscript/1. fluxomics/raw data/2_core_13CO2_bolus_injection.RData")
options(dplyr.print_min = 4)
# --------------------------------------------------------------------
# Infusion data
d.infusion.normalize = read_excel(pathID, sheet = "infusion.normalization")
# infusion data
d.infusion = d.all.treated %>%
filter(inj == "infusion" & treatment == "13C") %>%
filter(! round %in% c(43, 61 ))
# combine with normalization dataset: normalize to 0.1 umol 13C atoms infused / min /animal
d.infusion = d.infusion %>%
left_join(d.infusion.normalize %>% select(cage, infusion.norm.factor), by = "cage")
# normalize to infusion of 0.1 umol 13C atoms /min/animal; overwrite the normalized column (prior for bolus normalization)
d.infusion = d.infusion %>%
mutate(P1.umol.min.normalized = P1.umol.min / infusion.norm.factor) %>%
filter(is.finite(P1.umol.min.normalized))
# all time.h subtract ca 5 min dead time due to the ca. 10 uL dead volume with 2 uL/min infusion rate; this is needed as the exponential model is forced to pass (0, 0)
d.infusion = d.infusion %>%
mutate(time.h = time.h - 5/60,
infusion.length = infusion.length - 5/60) %>%  # infusion length also adjusted as it determines the pump turnoff time (marking the start of decay phase)
filter(P1.umol.min.normalized > -.02) # remove those sudden abnormal downward signal spikes
# remove outliers
d.infusion = d.infusion %>%
filter(! (P1.umol.min.normalized < .02 & tracer == "Glutamine" & time.h > 1)) %>% # abnormal downward spikes in glutamine after 2 h
filter(! cage %in% c(
435, # L64, lactate infusion, low recovery
458, # O58, C16:0
463,# O51, Alanine, ob/ob, much lower signal than others
476, 471, # O53, O56, lactate infusion, no tracer signal
490, 494, # L63, L64, 3-HB, abnormal signal
503, 508, 512, # O58, L62, L64, Acetate, no exponential curve
526,# O61, 3HB infusion, no signal
535, # O60, 3HB infusion, low signal  # tether # 3 has problem, leading to low signal to 490, 508, 526 and 535
552, # HFD, glucose infusion, line twisted, no 13CO2 signal
678, # HFD, H6,C16:0 infusion, no 13CO2 signal since the start of infusion, found dead at the end of infusion,
658, # HFD, valine infusion,  13CO2 start to drop after 2 h
991, 1036 # ob/ob, glucose infusion (6h group), too lower recovery
) ) %>%
filter(! (cage == 499 & time.h > 2.5) ) %>%  # signal abnormally drops, possibly tracer ran out in syringe
filter(! (cage %in% c(658, 664, 662) & time.h > 2) )   # WT, HFD(H-20), valine infusion, 13CO2 signal start to drop slightly but continuously after 2 h; appeared very weak after infusion
# exponential - steady state curve
d.infusion.expCurve = d.infusion %>% filter(time.h*60 <= infusion.length)
func.plot.infusion.kinetics.modeling <-
function(mydata = d.infusion.expCurve) {
# plot kinetic curve
plt.infusion.expCurve.kinetics = mydata %>%
# filter(round == 109) %>%
filter(time.h >= 0) %>%
ggplot(aes(x = time.h, y = P1.umol.min.normalized, color = phenotype )) +
geom_point(alpha = .4, size = .8) +
geom_line(aes(group = cage), alpha = .3, size = .2) +
facet_wrap(~tracer, nrow = 2, scales = "free_x") +
labs(y = "13CO2 exhaled (Âµmol / min / animal)\n")
# fit exponential stage with a exponential model
d.infusion.expCurve.modeled.all = mydata %>%
filter(time.h >=0) %>%
nest(-c(tracer, phenotype)) %>%
# mutate(model = map(data, ~nls(P1.umol.min ~ a - b * exp(-c * time.h), start = list(a = .05, b = 10, c= 1), data = .))) %>%
# force to pass (0, 0)
mutate(model = map(data,
~nls(P1.umol.min.normalized ~ a - a * exp(-c * time.h),
start = list(a = .05,  c= 1), data = .))) %>%
mutate(fitted = map2(.x = data, .y = model,
.f = ~ tibble(time.h = .x$time.h, fitted = predict(.y)  ) ) ) %>%
mutate(tidied = map(model, ~tidy(.)))
# fitted dataset
d.infusion.expCurve.modeled = d.infusion.expCurve.modeled.all %>% unnest(fitted)
# model summary
d.model.summary = d.infusion.expCurve.modeled.all %>% unnest(tidied) %>%
mutate(error.pct = std.error / estimate * 100) %>%
select(-c(data, model, fitted)) %>% arrange(tracer)
d.model.summary
# add exponential curve fitted to the kinetics
plt.kinetics.infusion.expCurve.modeled =
plt.infusion.expCurve.kinetics +
geom_line(
data = d.infusion.expCurve.modeled,
aes(x = time.h, y = fitted, color = phenotype), size = 1.2) +
expand_limits(y = 0) +
scale_y_continuous(expand = expansion(mult = c(0, .02)),
breaks = seq(0, .1, .02),
position = "right",
sec.axis = sec_axis( breaks = seq(0, 1, .20),
trans = ~./.1, # * 100,
name="recovery"),
) +
coord_cartesian(xlim = c(0, NA), ylim = c(0, .12)) +
labs(title = "normalized to 0.1 Âµmol 13C atoms infused /min/animal") +
theme_bw(base_size = 14) +
theme(legend.title = element_blank(),
legend.key.size = unit(.8, 'cm'),
axis.line = element_line(linewidth = .5),
legend.position = "bottom",
panel.grid = element_blank(),
strip.text = element_text(face = "bold"),
strip.background = element_blank()
) +
scale_color_manual(
values = c("HFD" = "chocolate1", "ob/ob" =  "deepskyblue3", "WT" = "grey30"),
limits = c("WT", "HFD", "ob/ob"),
labels = function(x){str_replace(x, "WT", "control")}) +
# legend line size
guides(color = guide_legend(override.aes = list(linewidth = 3),
nrow = 1))
myoutput <- list(
plot = plt.kinetics.infusion.expCurve.modeled,
model.summary = d.model.summary)
return(myoutput)
}
# all 3 phenotypes
plt.kinetics.infusion.expCurve.modeled_3phenotypes <-
func.plot.infusion.kinetics.modeling(
mydata = d.infusion.expCurve %>% filter(! tracer %in% c("Acetate", "Methionine", "Tryptophan"))
)[[1]]
plt.kinetics.infusion.expCurve.modeled_3phenotypes
ggsave(filename = "13CO2 recovery_infusion_3phenotypes.pdf",
plot = plt.kinetics.infusion.expCurve.modeled_3phenotypes,
path = "/Users/boyuan/Desktop/Harvard/Manuscript/1. fluxomics/R Figures",
height = 6, width = 10)
# only WT
plt.kinetics.infusion.expCurve.modeled_WT <-
(func.plot.infusion.kinetics.modeling(
mydata = d.infusion.expCurve %>%
filter(phenotype == "WT" & tracer != "Acetate")
))[[1]]
plt.kinetics.infusion.expCurve.modeled_WT +
coord_cartesian(expand = 0, ylim = c(0, .13))
ggsave(filename = "13CO2 recovery_infusion_WT.pdf",
plot = plt.kinetics.infusion.expCurve.modeled_WT +
theme(text = element_text(size = 20),
axis.title.y.left = element_text(margin = margin(r = 15)),
axis.title.y.right = element_text(margin = margin(l = 5))) + labs(x = "time (h)"),
path = "/Users/boyuan/Desktop/Harvard/Manuscript/1. fluxomics/R Figures",
device = "pdf", height = 7, width = 13)
# plot infusion of glucose to WT
plt.kinetics.infusion.expCurve.modeled_WT_glucose <-
(func.plot.infusion.kinetics.modeling(
mydata = d.infusion.expCurve %>% filter(phenotype == "WT" & tracer == "Glucose")
))[[1]] +
# overwrite the default with x-limits of 200 min
coord_cartesian(expand = 0)
plt.kinetics.infusion.expCurve.modeled_WT_glucose
ggsave(filename = "13CO2 recovery_infusion_WT_palm.pdf",
plot = plt.kinetics.infusion.expCurve.modeled_WT_glucose,
path = "/Users/boyuan/Desktop/Harvard/Manuscript/1. fluxomics/R Figures",
device = "pdf", height = 4, width = 4)
# Calculate recovery
d.recovery.infusion = d.infusion.expCurve %>%
# take average over time points after 2.6 h
filter((cage !=561 & time.h >= 2.6) |
(cage == 561 & time.h >= 2.6)) %>% # cage 561, C18:1, HFD,  started infusion late at 4:11 pm, and less than 3 h infusion was conducted
# for glucose, calculate recovery after 4h
filter(tracer == "Glucose" & time.h >= 4 |
tracer != "Glucose" & time.h > 0) %>%
group_by(phenotype, tracer, inj.umol.13C.atoms, cage, round) %>%
summarise(P1.umol.min.mean = mean(P1.umol.min),
P1.umol.min.SD = sd(P1.umol.min)) %>%
mutate(recovery.infuse = P1.umol.min.mean / inj.umol.13C.atoms,
recovery.infuse.SD = P1.umol.min.SD / inj.umol.13C.atoms)
d.energyExpenditure.selected
