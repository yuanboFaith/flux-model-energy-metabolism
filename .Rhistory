ratio.WT_ob = WT / `ob/ob` - 1,
ratio.HFD_ob = HFD / `ob/ob` - 1) %>%
filter(abs(ratio.WT_HFD) > .1 | abs(ratio.WT_ob) > .1 | ratio.HFD_ob > .1 )
p <- d.fox.infuse.bolus.subset %>%
group_by(tracer) %>%
pairwise_t_test(fox ~ phenotype, p.adjust.method = "bonferroni") %>%
add_xy_position(x = "tracer") %>%
arrange(p)
crosswidth = .3
p2 <- p %>%
mutate(xmin = ifelse(xmin < x,  x - crosswidth, xmin),
xmax = ifelse(xmax > x,  x + crosswidth, xmax),
# lower the height of all bars
y.position = ifelse(tracer != "Glutamine", y.position - .15, y.position)) %>%
filter(p.adj < 0.05) %>%
filter(! (tracer == "C18:2" & group1 == "WT" & group2 == "HFD")) %>%
group_by(tracer) %>%
# switch the label position
mutate(y.position = ifelse(y.position == max(y.position), min(y.position), max(y.position))) %>%
# adjust bar height of glutamine
mutate(y.position = ifelse(tracer == "Glutamine" & group1 == "WT", 1, y.position)) %>%
mutate(y.position = ifelse(tracer == "Glutamine" & group1 == "HFD", 1.072, y.position))
# add significant stars
plt.fox.3phenotypes.stars <- plt.fox.3phenotypes +
# crossbar
geom_segment(
data = p2,
aes(x = xmin - 4, xend = xmax - 4, y = y.position, yend = y.position),
inherit.aes = F) +
# stars
geom_text(
data = p2, size = 6,
aes(x = (xmin +  xmax)/2 - 4, y = y.position + 0.02, label = p.adj.signif),
inherit.aes = F)
plt.fox.3phenotypes.stars
ggsave(filename = "13CO2_fox_bolus_infuse_3phenotypes.pdf",
path = "/Users/boyuan/Desktop/Harvard/Manuscript/1. fluxomics/R Figures",
height = 2.5, width = 12)
# style II
plt.fox.3phenotypes +
facet_wrap(~tracer, scales = "free_x", nrow = 2) +
theme(legend.position = "bottom") +
scale_x_discrete(expand = expansion(mult = c(.5, .5))) +
theme(axis.text.x = element_blank())
ggsave(filename = "13CO2_fox_bolus_infuse_3phenotypes_faceted.pdf",
path = "/Users/boyuan/Desktop/Harvard/Manuscript/1. fluxomics/R Figures",
height = 5.5 * 1.1, width = 9 * 1.1)
# # Pool the recovery from both I.V. bolus injection and infusion
# # (for glycerol, only use the infusion data for network computation)
# d.recovery.infuse.bolus.pooled.summary = d.recovery.infuse.bolus %>%
#   group_by(phenotype, tracer) %>%
#   summarise(recovery.mean = mean(recovery, na.rm = T),
#             recovery.SD = sd(recovery, na.rm = T),
#             n.rep = n_distinct(recovery),
#             recovery.SEM = recovery.SD / sqrt(n.rep) ) %>%
#   mutate(method = "pooled")
# d.recovery.infuse.bolus.pooled.summary
#
# d.recovery.infuse.bolus$phenotype %>% unique()
d.fox.infuse.bolus %>%
filter(phenotype %in% c("WT", "HFD", "ob/ob")) %>%
filter(! tracer %in% c("Methionine", "Tryptophan")) %>%
group_by(tracer) %>%
rstatix::pairwise_t_test(
paired = F, fox ~ phenotype , p.adjust.method = "bonferroni"
) %>%
filter(p.adj < .05) %>%
select(-c(p, p.signif))
# ------------------------------------------------------------
# Compare body weight used in experiments of 13CO2 measurement
# We'll use the body weight from the serum labeling infusion experiments
# that data is directly involved in flux calculation
d.all %>% select(phenotype, cage, tracer, BW) %>%
filter(phenotype %in% c("WT", "ob/ob", "HFD")) %>% distinct() %>%
mutate(phenotype = factor(phenotype, levels = ordered.phenotype))  %>%
ggplot(aes(x = phenotype, y = BW, fill = phenotype)) +
stat_summary(geom = "bar", fun = mean, alpha = .7, color = "black") +
geom_quasirandom(width = .2, size = 1, show.legend = F)+
# facet_wrap(~tracer, nrow = 2, scales = "free_x") +
scale_y_continuous(expand = expansion(mult = c(0, .1)),
breaks = seq(0, 80, 10),
name = "BW (in 13CO2 experiment)\n") +
scale_x_discrete(expand = expansion(add = .8),
labels = function(x){str_replace(x, "WT", "control")}) +
expand_limits(y = 0) +
scale_fill_manual(values = color.phenotype,
labels = function(x){str_replace(x, "WT", "control")}) +
theme.myClassic +
theme(axis.text.x = element_text(angle = 60, hjust = 1),
axis.title.x = element_blank())
#<>#<>#<>#<>#<>#<>#<>#<>#<>#<>#<>#<>#<>#<>#<>#<>#<>#<>#<>#<>#<>#<>#<>#<>#<>#<>#<>#<>
#<>#<>#<>#<>#<>#<>#<>#<>#<>#<>#<>#<>#<>#<>#<>#<>#<>#<>#<>#<>#<>#<>#<>#<>#<>#<>#<>#<>
# Validation: radioactive 14C carcass signal +13CO2 recovery = 100%, confirming accurate measurement
d.14C = read_excel(pathID, sheet = "14C")
C14.rec <- (d.14C$carc.recovery)[c(1:3)]
C14.recovery.mean <- mean(C14.rec)
C14.recovery.sd <- sd(C14.rec)
# WT glucose bolus-based recovery
kkk <- d.recovery.infuse.bolus %>% filter(inj == "bolus inj." & phenotype == "WT" & tracer == "Glucose") %>%
group_by(phenotype) %>%
summarise(recovery.mean = mean(recovery),
recovery.SD = sd(recovery))
plt.14C <- tibble(phenotype = "WT",
recovery.mean = C14.recovery.mean,
recovery.SD = C14.recovery.sd) %>%
rbind(kkk) %>%
mutate(treatment = factor(c( "14C-carcass", "13CO2"), ordered = T)) %>%
mutate(error.y = c( C14.recovery.mean + kkk$recovery.mean,
kkk$recovery.mean)) %>%
ggplot(aes(x = 1, y = recovery.mean, fill = treatment)) +
geom_col(position = position_stack(reverse = T),
alpha = .6, color = "black") +
geom_errorbar(aes(ymin = error.y - recovery.SD ,
ymax = error.y + recovery.SD),
width  = .3) +
theme.myClassic +
theme(legend.position = "none",
panel.grid = element_blank(),
axis.title.y = element_text(face = "bold"),
text = element_text(size = 19, color = "black"),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 23),
plot.margin = margin(b = 10, unit = "pt")) +
scale_y_continuous(breaks = seq(0, 1, .2),
expand = expansion(mult = c(0, .1))) +
scale_x_discrete(expand = expansion(add = .3)) +
# geom_hline(yintercept = 1, linetype = "dashed")  +
labs(y = "recovery of injected dose\n") +
scale_fill_manual(values = c("red4", "orange"))
plt.14C
ggsave(filename = "14C.pdf",
plot = plt.14C,
path = "/Users/boyuan/Desktop/Harvard/Manuscript/1. fluxomics/R Figures",
device = "pdf", height = 4.5, width = 2.9)
##-<>-##-<>-##-<>-##-<>-##-<>-##-<>-##-<>-##-<>-##-<>-##-<>-##-<>-##-<>-
# Calculate total CO2 production, total O2 consumption, and RER,
# based on the last hour of the infusion experiments
d.infusion.stable.0 <- d.infusion %>%
# filter(time.h >= 1.5 & time.h <= 2.5)
filter(time.h >= 2.5 & time.h <= 3) %>%
# select experiments done before 2013 Xmax
filter(round <= 109 )
# Calcuate total CO2 output rate from animal
d.infusion.stable.1 <- d.infusion.stable.0 %>%
mutate(P_total.mL.min = (ppm.t.out - ppm.in) * 2000 / 10^6,
P_total.umol.min = P_total.mL.min/1000 / 22.4 * 10^6)
# calculate the baseline of O2 for each single round of experiment
d.O2.baseline <- d.all %>%
filter(treatment == "baseline") %>%
filter(time.h > 3) %>%
group_by(round) %>%
summarise(O2.baseline.mean = mean(O2_A))
# calculate O2 consumption rate
d.infusion.stable.2 <- d.infusion.stable.1 %>%
left_join(d.O2.baseline, by = "round") %>%
mutate(O2.consume.mL.min = (O2.baseline.mean - O2_A)/100 * 2000,
O2.consume.umol.min = O2.consume.mL.min/1000/22.4 * 10^6) %>%
select(-c(O2.baseline.mean, O2_A, contains("mL"))) %>%
# phenotype in order
mutate(phenotype = factor(phenotype, levels = ordered.phenotype))
# for ID, if NA, assign a random number
d.infusion.stable.2 <- d.infusion.stable.2 %>%
mutate(mouseID = ifelse(is.na(mouseID), sample(1:1000, 1) %>% as.character(), mouseID))
# summarize for each mouse in each experiment
d.infusion.stable.summary1 <- d.infusion.stable.2 %>%
group_by(mouseID, round.cage, round, phenotype) %>%
# group_by(mouseID, phenotype) %>%
summarise(CO2.umol.min = mean(P_total.umol.min),
O2.umol.min = mean(O2.consume.umol.min),
RER = CO2.umol.min / O2.umol.min,
BW = mean(BW)) %>%
# remove obvious 1-3 outliers in each phenotype that has RER > 1.5
filter(RER < 1.5) %>%
filter(RER < .95) %>%
# remove 3 outliers in HFD with very low CO2 output,
filter(! (phenotype == "HFD" & CO2.umol.min < 50)) %>%
# remove 1 outliers in HFD with very high O2 consumption
filter(! (phenotype == "HFD" & O2.umol.min > 125))
# # summarize
# d.infusion.stable.summary1 %>% ungroup() %>%
#   select(-c(mouseID, round.cage, round)) %>%
#   group_by(phenotype) %>%
#   summarise(CO2 = mean(CO2.umol.min))
# significant analysis
library(rstatix)
# define function making bar plots
func.plt.basicsPhysiology <- function(
mydata = d.infusion.stable.summary1,
whichY = "CO2.umol.min", mytitle = whichY){
mydata %>%
ggplot(aes_string(x = "phenotype", y = whichY, fill = "phenotype")) +
# mean
stat_summary(fun = mean, geom = "bar", alpha = .7, color = "black") +
# standard deviation
stat_summary(fun.data = mean_sdl, geom = "errorbar",
fun.args = list(mult = 1),
width = .3) +
# points
geom_quasirandom(show.legend = F ) +
theme.myClassic +
scale_fill_manual(values = color.phenotype,
labels = function(x){str_replace(x, "WT", "control")}) +
theme(axis.title.x = element_blank(),
axis.title.y = element_text(size = 19),
axis.title.y.left = element_text(margin = margin(r = 8, unit = "pt")),
axis.title.y.right = element_text(margin = margin(l = 8, unit = "pt")),
axis.text.x = element_blank(),
axis.text.y = element_text(size = 17),
axis.ticks.x = element_blank(),
legend.position = "bottom") +
scale_x_discrete(expand = expansion(add = 1)) +
ggtitle(label = mytitle)
}
# define function processing significant analysis
func.sig1 <- function(
dataset, # dataset output from pairwise_t_test()
y.max.up = 5,  # upper crossbar shift further upward
y.min.down = 5, # bottom crossbar further shifted downward
xmin.max.shift = 0 # sfhit both xmin and xmax to align with bar position; negative to shift to the left
){
dataset %>%
add_xy_position(x = "phenotype") %>%
filter(p.adj < 0.05) %>% arrange(xmax) %>%
mutate(y.position = ifelse(y.position == max(y.position), y.position + y.max.up, y.position)) %>%
mutate(y.position = ifelse(y.position == min(y.position), y.position - y.min.down, y.position)) %>%
mutate(xmin = xmin + xmin.max.shift, xmax = xmax + xmin.max.shift) %>%
return()
}
# define function to label with stars
func.sig2 <- function(plot){
plot +
geom_text(data = s, # in global environment
aes(x = (xmin + xmax)/2 , y = y.position, label = p.adj.signif),
inherit.aes = F, size = 8)
}
# plot RER
plt.RER <- func.plt.basicsPhysiology(whichY = "RER") +
scale_y_continuous(expand = expansion(mult = c(0, .1)),
breaks = seq(.7, 1, .05)) +
coord_cartesian(ylim = c(0.7, NA))
plt.RER <- (plt.RER +
geom_segment(data = s <- d.infusion.stable.summary1 %>% ungroup() %>%
pairwise_t_test(RER ~ phenotype, p.adjust.method = "bonferroni") %>%
func.sig1(y.max.up = .02, y.min.down = .00),
aes(x = xmin, xend = xmax, y = y.position, yend = y.position), inherit.aes = F)) %>%
func.sig2()
plt.RER
# plot total CO2 output
plt.CO2 <- func.plt.basicsPhysiology(whichY = "CO2.umol.min", mytitle = "CO2 production") +
scale_y_continuous(
breaks = seq(0, 120, 25),limits = c(0, NA),
expand = expansion(mult = c(0, .1)), name = "µmol / min" ,
sec.axis = sec_axis(trans = ~. / 10^6 * 22.4 * 1000 * 60 ,
breaks = seq(0, 150, 30),
name = "mL / h"))
plt.CO2 <- (plt.CO2 +
geom_segment(data = s <- d.infusion.stable.summary1 %>% ungroup() %>%
pairwise_t_test(CO2.umol.min ~ phenotype, p.adjust.method = "bonferroni") %>%
func.sig1(y.max.up = 5, y.min.down = 5),
aes(x = xmin, xend = xmax, y = y.position, yend = y.position), inherit.aes = F))  %>%
func.sig2()
plt.CO2
# plot total O2 consumption
plt.O2 <- func.plt.basicsPhysiology(whichY = "O2.umol.min", mytitle = "O2 consumption") +
scale_y_continuous(
breaks = seq(0, 150, 25), #  limits = c(0, 135),
expand = expansion(mult = c(0, .1)), name = "µmol / min",
sec.axis = sec_axis(trans = ~. / 10^6 * 22.4 * 1000 * 60 ,
breaks = seq(0, 180, 30),
name = "mL / h"))
plt.O2 <- (plt.O2 +
geom_segment(data = s <- d.infusion.stable.summary1 %>% ungroup() %>%
pairwise_t_test(O2.umol.min ~ phenotype, p.adjust.method = "bonferroni") %>%
func.sig1(y.max.up = 7, y.min.down = 7),
aes(x = xmin, xend = xmax, y = y.position, yend = y.position), inherit.aes = F))  %>%
func.sig2()
plt.O2
# func.plt.basicsPhysiology(whichY = "BW", mytitle = "BW")
# load basic animal information from the ordinary infusion experiments
p <- c("db/db", "WT", "HFD", "ob/ob")
names(p) <- c("d", "L", "H", "O")
mypath = "/Users/boyuan/Desktop/Harvard/Research/db db mice/Infusion data/infusion rounds data.xlsx"
d.animal  <-  read_excel(path = mypath, sheet = "infusion rounds", skip = 7) %>%
mutate(phenotype = str_extract(mouse_ID, "[a-zA-Z]+")) %>%
mutate(phenotype = p[phenotype] %>% factor(levels = p) )
# plot body weight using the serum-labeling experiment infusion
d.BW2 <- d.animal %>% select(phenotype, mouse_ID, BW) %>%
group_by(mouse_ID, phenotype) %>%
summarise(BW = mean(BW)) %>%
filter(phenotype != "db/db")
plt.BW <- func.plt.basicsPhysiology(
mydata = d.BW2 %>% group_by(mouse_ID, phenotype) %>% summarise(BW = mean(BW)),
whichY = "BW", mytitle = "body weight") +
scale_y_continuous(breaks = seq(0, 80, 15),limits = c(0, NA),
name = "gram",
expand = expansion(mult = c(0, .1)))
plt.BW <- (plt.BW +
geom_segment(data = s <- d.BW2 %>% ungroup() %>%
pairwise_t_test(BW ~ phenotype, p.adjust.method = "bonferroni") %>%
add_xy_position(x = "phenotype") %>%
func.sig1(y.max.up = 4, y.min.down = 4, xmin.max.shift = -1),
aes(x = xmin, xend = xmax, y = y.position, yend = y.position), inherit.aes = F))  %>%
func.sig2()
plt.BW
# Glycemia (from the 13CO2 measurement experiments)
d.glycemia <- d.mouseID %>%
filter(phenotype %in% c("WT", "ob/ob", "HFD")) %>%
mutate(phenotype = factor(phenotype, levels = c("WT", "HFD", "ob/ob", "db/db"))) %>%
mutate(glycemia = as.numeric(`glycemia.mg/dL-basal`))
x <- d.glycemia %>% filter(phenotype == "ob/ob") %>% group_by(round) %>%
summarise(glycemia = mean(glycemia, na.rm = T), phenotype = "ob/ob")
d.glycemia <- d.glycemia %>% filter(phenotype != "ob/ob") %>% bind_rows(x) %>%
mutate(phenotype = factor(phenotype, levels = ordered.phenotype))
# Glycemia [from the ordinary infusion (serum labeling)  experiments]
# d.glycemia <- d.animal %>% select(phenotype, mouse_ID, tail_blood_glucose_1) %>%
#   group_by(mouse_ID, phenotype) %>%
#   summarise(glycemia = mean(tail_blood_glucose_1, na.rm = T)) %>%
#   filter(phenotype != "db/db")
# d.glycemia <- d.glycemia[complete.cases(d.glycemia), ] %>% filter(between(glycemia, 100, 300))
plt.glycemia <- d.glycemia %>%
func.plt.basicsPhysiology(whichY = "glycemia") +
scale_y_continuous(
breaks = seq(0, 600, 100), limits = c(0, NA),
name = "mg / dL", expand = expansion(mult = c(0, .1)),
sec.axis = sec_axis(trans = ~ . / 180 * 10, name = "mM"))
plt.glycemia <- (plt.glycemia +
geom_segment(data = s <- d.glycemia %>% ungroup() %>%
pairwise_t_test(glycemia ~ phenotype, p.adjust.method = "bonferroni") %>%
add_xy_position(x = "phenotype") %>%
func.sig1(),
aes(x = xmin, xend = xmax, y = y.position, yend = y.position), inherit.aes = F))  %>%
func.sig2()
plt.glycemia
# insulin level at basal condition
d.insulin <- read_excel("/Users/boyuan/Desktop/Harvard/Manuscript/1. fluxomics/raw data/hyperinsulinemia.xlsx",
sheet = "insulin_phenotypes",
range = "A12:E31")
plt.insulin <- d.insulin %>%
mutate(phenotype = factor(phenotype, levels = ordered.phenotype)) %>%
func.plt.basicsPhysiology(whichY = "conc_corrected", mytitle = "insulin") +
scale_y_continuous(
name = "ng / mL",
breaks = seq(0, 70, 10),
limits = c(0, NA),
expand = expansion(mult = c(0, .1)))
plt.insulin <- (plt.insulin +
geom_segment(data = s <- d.insulin %>% ungroup() %>%
pairwise_t_test(conc_corrected ~ phenotype, p.adjust.method = "bonferroni") %>%
func.sig1(y.max.up = -20, y.min.down = 50),
aes(x = xmin, xend = xmax, y = y.position, yend = y.position), inherit.aes = F))  %>%
func.sig2()
plt.insulin
# - total energy expenditure
d.energyExpenditure <- d.infusion.stable.summary1 %>%
mutate(O2.L.min = O2.umol.min / 10^6 * 22.4,
CO2.L.min = CO2.umol.min / 10^6 * 22.4) %>%
# energy expenditure using Weir's formula
mutate(kcal.h = (3.941 * O2.L.min + 1.106 * CO2.L.min) * 1440 / 24,
cal.min = kcal.h / 60 * 1000)
plt.calorie <- d.energyExpenditure %>%
func.plt.basicsPhysiology(whichY = "cal.min", mytitle = "energy expenditure") +
scale_y_continuous(
name = "cal / min",
breaks = seq(0, 12, 3),
limits = c(0, NA),
expand = expansion(mult = c(0, .1)),
sec.axis = sec_axis(trans = ~. * 60 / 1000,
name = "kcal / h"))
plt.calorie <- (plt.calorie +
geom_segment(data = s <- d.energyExpenditure %>% ungroup() %>%
pairwise_t_test(cal.min ~ phenotype, p.adjust.method = "bonferroni") %>%
func.sig1(y.max.up = 1, y.min.down = 1),
aes(x = xmin, xend = xmax, y = y.position, yend = y.position), inherit.aes = F))  %>%
func.sig2()
plt.calorie
# plot all together
b <- ggplot() + theme_void()
p1 <- plot_grid(plt.BW , b,
plt.glycemia ,
b,  plt.insulin,
b, plt.CO2,
nrow = 1, rel_widths = c(.85, .1, 1, .1, .85, .1,  1))
p1
p2 <- plot_grid(b, plt.O2 , b, plt.RER , b, plt.calorie, b,
nrow = 1,
rel_widths = c(.3, 1, .1,
.85, .1,
1, .3))
p2
plot_grid(p1, p2, nrow = 2, align = "v")
ggsave(filename = "basic physiology.pdf",
path = "/Users/boyuan/Desktop/Harvard/Manuscript/1. fluxomics/R Figures",
height = 8, width = 15)
# ANCOVA analysis
d.energyExpenditure.selected <- d.energyExpenditure %>% ungroup() %>%
select(phenotype, mouseID, CO2.L.min, O2.L.min, cal.min, BW, RER)
# plot
d.energyExpenditure.selected %>%
ggplot(aes(BW, CO2.L.min, color = phenotype)) +
geom_point(size = 3, alpha = .5) +
geom_smooth(method = "lm", se = F) +
theme.myClassic +
scale_color_manual(values = color.phenotype)
ggsave(filename = "BW_energy_expenditure_ANCOVA.pdf",
path = "/Users/boyuan/Desktop/Harvard/Manuscript/1. fluxomics/R Figures",
height = 4, width = 5)
# ANCOVA test
model.glm <- glm(CO2.L.min ~ BW + phenotype,
data = d.energyExpenditure.selected,
family = gaussian(link = "identity"))
summary(model.glm)
# summarize infusion parameters - <>-- <>-- <>-- <>-- <>-- <>-- <>-- <>-- <>-- <>-
d.inj.info <-  d.all.raw2 %>%
filter(inj == "tail.vein_anesthesia" & treatment == "13C") %>%
group_by(tracer, treatment) %>%
summarise(inj.mM.max = max(`tracer mM`, na.rm = T),
inj.mM.min = min(`tracer mM`, na.rm = T)) %>%
mutate(inj.vol.uL = 200) %>%
select(-treatment)
d.inf.info <-  d.mouseID %>%
filter(inj == "infusion" & treatment == "13C") %>%
group_by(tracer, treatment) %>%
summarise(inj.mM = mean(`tracer mM`, na.rm = T),
inf = mean(inj.uL)) %>% ungroup() %>%
select(-treatment) %>%
rename(inf.mM = inj.mM)
d.13C.info <- left_join(d.inj.info, d.inf.info) %>% as.data.frame()
# output useful information
# <>-# <>-# <>-# <>-# <>-# <>-# <>-# <>-# <>-# <>-# <>-# <>-# <>-# <>-# <>-
# BODY COMPOSITION
# dataset o %>%  body composition by MRI
d.bodyComposition <- read_excel(
"/Users/boyuan/Desktop/Harvard/Manuscript/1. fluxomics/raw data/body composition.xlsx",
range = "A14:C28") %>%
mutate(phenotype = factor(phenotype, levels = ordered.phenotype))
# mean and SD of mass of fat and lean tissues
d.bodyComposition.tidy <- d.bodyComposition %>%
group_by(phenotype) %>%
summarise(across(c(fat, lean),
.fn = list(mean = ~mean(.x), sd = ~sd(.x)))
) %>%
pivot_longer(-phenotype, names_sep = "_",
names_to = c("part", ".value")) %>%
# error bar position
group_by(phenotype) %>%
arrange(desc(part)) %>%
mutate(y.error = cumsum(mean))
# plot
plt.fat.lean <- d.bodyComposition.tidy %>%
ggplot(aes(x = phenotype, y = mean, fill = part)) +
geom_col(color = "black") +
geom_errorbar(aes(ymin = y.error - sd, ymax = y.error),
width = .2) +
theme.myClassic +
scale_y_continuous(expand = expansion(mult = 0),
breaks = seq(0, 70, 10)) +
scale_fill_manual(values = c("fat" = "snow2", "lean" = "snow4")) +
labs(y = "mass (g)")
plt.fat.lean
# add labels
plt.fat.lean.labeled <- plt.fat.lean + geom_text(
aes(label = round(mean, 1)),
position = position_stack(vjust = .5), color = "cyan")
plt.fat.lean.labeled
# calculate fraction of fat and lean - ------------------------
d.bodyComposition.summary <- d.bodyComposition %>%
mutate(sum = fat + lean,
fat.frac = fat/sum,
lean.frac = lean / sum) %>%
group_by(phenotype) %>%
summarise(across(contains("frac"),
.fn = list(
mean = ~ mean(.x, na.rm = T), # calcualte the mean
sd = ~ sd(.x, na.rm = T))))  # calculate standard deviation
# tidy up
d.bodyComposition.summary.tidy <- d.bodyComposition.summary %>%
pivot_longer(-phenotype, names_to = c("part", ".value"), names_sep = "_") %>%
group_by(phenotype) %>%
arrange(desc(part)) %>%
mutate(y.error = cumsum(mean)) %>%
mutate(part = str_remove(part, ".frac"))
# plot of distribution fraction
plt.fat.lean.frac <- d.bodyComposition.summary.tidy %>%
ggplot(aes(x = phenotype, y = mean, fill = part)) +
geom_col(color = "black") +
geom_errorbar(aes(ymin = y.error - sd, ymax = y.error),
width = .2) +
theme.myClassic +
scale_y_continuous(expand = expansion(mult = 0),
breaks = seq(0, 1, .2)) +
scale_fill_manual(values = c("fat" = "snow2", "lean" = "snow4")) +
labs( y = "fraction")
plt.fat.lean.frac
# add label
plt.fat.lean.frac.labeled <- plt.fat.lean.frac + geom_text(
aes(label = round(mean*100, 1)),
position = position_stack(vjust = .5), color = "cyan")
plt.fat.lean.frac.labeled
# plot all
plot_grid(plt.fat.lean.labeled + theme(legend.position = "bottom"),
plt.fat.lean.frac.labeled + theme(legend.position = "bottom"))
# export the data
save(d.energyExpenditure, func.plt.basicsPhysiology, d.13C.info, d.infusion.expCurve,
d.infusion.stable.summary1,
# body composition
d.bodyComposition.summary.tidy,
d.bodyComposition.tidy,
# figure data exported to Source Data
f.clean, A,
file = "/Users/boyuan/Desktop/Harvard/Manuscript/1. fluxomics/raw data/3_core_13CO2_infusion_physiology_basics.RData")
