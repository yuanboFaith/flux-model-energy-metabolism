geom_point() +
coord_flip()
k.summary %>% filter(Tissue== "GA" ) %>%
select(Treatment, spike ) %>% table()
# Check error percent
k = rbind(d1, d2) %>% rbind(d3) %>% rbind(d4) %>%
rbind(d5, d6)
# Check error percent
k = rbind(d1, d2) %>% rbind(d3) %>% rbind(d4) %>%
rbind(d5) %>% rbind(d6)
# Check error percent
k = rbind(d1, d2) %>% rbind(d3) %>% rbind(d4) %>%
rbind(d.control.1) %>% rbind(d.control.2)
k$Tissue %>% unique()
k = k %>% ungroup() %>% filter(! Tissue %in% c("BLK", "0.625 nCi pure", NA))
k$spike %>% unique()
k.summary = k %>% group_by(spike, Treatment, Tissue) %>%
summarise(mean.DPM = mean(DPM), sd.DPM = sd(DPM))  %>%
mutate(error.pct = sd.DPM / mean.DPM * 100)
k.summary %>%
ggplot(aes(x = Tissue, y = error.pct, color = Treatment)) +
geom_point() +
coord_flip()
k.summary %>%
ggplot(aes(x = Tissue, y = error.pct, color = Treatment, shape = spike)) +
geom_point() +
coord_flip()
k.summary %>%
ggplot(aes(x = Tissue, y = error.pct, color = Treatment, shape = spike)) +
geom_point() + coord_flip() + labs(x = "error percent")
k.summary %>%
ggplot(aes(x = Tissue, y = error.pct, color = Treatment, shape = spike)) +
geom_point() + coord_flip() + labs(y = "error percent")
k.summary %>%
ggplot(aes(x = Tissue, y = error.pct, color = Treatment, shape = spike)) +
geom_point(size = 4) + coord_flip() + labs(y = "error percent")
k.summary %>%
ggplot(aes(x = Tissue, y = error.pct, color = Treatment, shape = spike)) +
geom_point(size = 3) + coord_flip() + labs(y = "error percent")
k.summary %>%
geom_density(aes(x = error.pct, fill = Treatment))
k.summary %>%
ggplot() +
geom_density(aes(x = error.pct, fill = Treatment))
k.summary %>%
ggplot() +
geom_density(aes(x = error.pct, fill = Treatment), alpha = .2)
k.summary %>%
ggplot() +
geom_density(aes(x = error.pct, fill = Treatment, color = Treatment), alpha = .2)
k.summary %>%
ggplot() +
geom_histogram(aes(x = error.pct, fill = Treatment, color = Treatment), alpha = .2)
k.summary %>%
ggplot() +
geom_histogram(aes(x = error.pct, fill = Treatment, color = Treatment),
alpha = .5, position = "dodge")
k.summary %>%
ggplot() +
geom_histogram(aes(x = error.pct, fill = Treatment, color = Treatment),
alpha = .5, position = "dodge", binwidth = 1)
k.summary %>%
ggplot() +
geom_histogram(aes(x = error.pct, fill = Treatment, color = Treatment),
alpha = .5, position = "dodge", binwidth = .5)
k.summary %>%
ggplot() +
geom_histogram(aes(x = error.pct, fill = Treatment, color = Treatment),
alpha = .5, position = "dodge", binwidth = .2)
k.summary %>%
ggplot(aes(x = Tissue, y = error.pct, color = Treatment, shape = spike)) +
geom_point(size = 3) + coord_flip() + labs(y = "error percent")
k.summary %>%
ggplot(aes(x = Tissue, y = error.pct, color = Treatment, shape = spike)) +
geom_point(size = 3) + coord_flip() + labs(y = "error percent") +
geom_rug(sides = "b")
k.summary %>%
ggplot(aes(x = Tissue, y = error.pct, color = Treatment, shape = spike)) +
geom_point(size = 3) + coord_flip() + labs(y = "error percent") +
geom_rug(sides = "l")
k.summary %>%
ggplot(aes(x = Tissue, y = error.pct, color = Treatment, shape = spike)) +
geom_point(size = 3) + coord_flip() + labs(y = "error percent") +
geom_rug(sides = "l", alpha = .2)
k.summary %>%
ggplot(aes(x = Tissue, y = error.pct, color = Treatment, shape = spike)) +
geom_point(size = 3) + coord_flip() + labs(y = "error percent") +
geom_rug(sides = "l", alpha = .2, width = .2)
k.summary %>%
ggplot(aes(x = Tissue, y = error.pct, color = Treatment, shape = spike)) +
geom_point(size = 3) + coord_flip() + labs(y = "error percent") +
geom_rug(sides = "l", alpha = .8, length  = .2)
k.summary %>%
ggplot(aes(x = Tissue, y = error.pct, color = Treatment, shape = spike)) +
geom_point(size = 3) + coord_flip() + labs(y = "error percent") +
geom_rug(sides = "l", alpha = .8, length  = unit(2, "lines"))
k.summary %>%
ggplot(aes(x = Tissue, y = error.pct, color = Treatment, shape = spike)) +
geom_point(size = 3) + coord_flip() + labs(y = "error percent") +
geom_rug(sides = "l", alpha = .8, length  = unit(1, "lines"))
k.summary %>%
ggplot(aes(x = Tissue, y = error.pct, color = Treatment, shape = spike)) +
geom_point(size = 3) + coord_flip() + labs(y = "error percent") +
geom_rug(sides = "l", alpha = .8, length  = unit(.5, "lines"))
k.summary %>%
ggplot(aes(x = Tissue, y = error.pct, color = Treatment, shape = spike)) +
geom_point(size = 3) + coord_flip() + labs(y = "error percent") +
geom_rug(sides = "l", alpha = .6, length  = unit(.5, "lines"))
p = k.summary %>%
ggplot(aes(x = Tissue, y = error.pct, color = Treatment, shape = spike)) +
geom_point(size = 3) + coord_flip() + labs(y = "error percent") +
geom_rug(sides = "l", alpha = .6, length  = unit(.5, "lines"))
ggExtra::ggMarginal(p)
k.summary %>%
ggplot() +
geom_histogram(aes(x = error.pct, fill = Treatment, color = Treatment),
alpha = .5, position = "dodge", binwidth = .2)
k.summary %>%
ggplot() +
geom_density(aes(x = error.pct, fill = Treatment, color = Treatment),
alpha = .5, )
k.summary %>%
ggplot() +
geom_density(aes(x = error.pct, fill = Treatment, color = Treatment),
alpha = .5)
k.summary %>%
ggplot() +
geom_density(aes(x = error.pct, fill = Treatment, color = Treatment), alpha = .5)
# Check error percent
k = rbind(d1, d2) %>% rbind(d3) %>% rbind(d4) %>%
rbind(d.control.1) %>% rbind(d.control.2)
k$Tissue %>% unique()
k = k %>% ungroup() %>% filter(! Tissue %in% c("BLK", "0.625 nCi pure", NA))
k$spike %>% unique()
k.summary = k %>% group_by(spike, Treatment, Tissue) %>%
summarise(mean.DPM = mean(CPM), sd.DPM = sd(CPM))  %>%
mutate(error.pct = sd.DPM / mean.DPM * 100)
k.summary %>%
ggplot(aes(x = Tissue, y = error.pct, color = Treatment, shape = spike)) +
geom_point(size = 3) + coord_flip() + labs(y = "error percent") +
geom_rug(sides = "l", alpha = .6, length  = unit(.5, "lines"))
k.summary = k %>% group_by(spike, Treatment, Tissue) %>%
summarise(mean.DPM = mean(DPM), sd.DPM = sd(DPM))  %>%
mutate(error.pct = sd.DPM / mean.DPM * 100)
k.summary %>%
ggplot(aes(x = Tissue, y = error.pct, color = Treatment, shape = spike)) +
geom_point(size = 3) + coord_flip() + labs(y = "error percent") +
geom_rug(sides = "l", alpha = .6, length  = unit(.5, "lines"))
# plot
d.recovery.control.dpmTiss %>%
ggplot(aes(x = Recovery, y = NetDPM.tiss.perMg, color = Tissue)) +
geom_point(data = d.recovery.control.dpmTiss %>% filter(inject == "I.P"), size = 8, alpha = .5 ) +
geom_text(aes(label = Tissue), fontface = "bold") +
theme(legend.position = "None") +
labs(y = "DPM / mg tissue")
# plot
d.recovery.control.dpmTiss %>%
ggplot(aes(x = Recovery, y = NetDPM.tiss.perMg, color = Tissue)) +
geom_point(data = d.recovery.control.dpmTiss %>% filter(inject == "I.P"), size = 8, alpha = .5 ) +
geom_text(aes(label = Tissue), fontface = "bold") +
theme(legend.position = "None") +
labs(y = "DPM / mg tissue")
func.plt(data = d.recovery.control %>% filter(spike %>% str_detect("Mouse"))) +
facet_wrap(~spike, nrow = 1) +
coord_cartesian(ylim = c(0, 1.0)) +
geom_line(aes(group = spike))
k.summary %>%
ggplot(aes(x = Tissue, y = error.pct, color = Treatment, shape = spike)) +
geom_point(size = 3) + coord_flip() + labs(y = "error percent")
5.6/6
library(tidyverse)
library(ggbeeswarm)
library(readxl)
library(RColorBrewer)
# Labeling data
path.labeling = "/Users/boyuan/Desktop/Harvard/Research/db db mice/Infusion data/2021_Nov_gluc_lact.xlsm"
path.infusion.surgery = "/Users/boyuan/Desktop/Harvard/Research/db db mice/Infusion data/infusion rounds data.xlsx"
d = read_excel(path.labeling, sheet = "2021_Nov_gluc_lact")
d = d %>% select( - contains("d-")) %>% # remove infusion round d; likely cross contamination of artery blood by tracer residual on the button; ca. 80% labeling in art. blood
select( - contains( "a-tail-d1")) # mouse jumped out of cage and fell from table to floor during infusion; ca. only 5% M+6 glucose labeling, aberrantly low;
d.LCMS_sampleInfo = read_excel(path.labeling, sheet = "sample_info")
d.infusion_rounds = read_excel(path = path.infusion.surgery, sheet = "infusion rounds", skip = 7)
# background subtraction & natural abundance correction
d.backgroundSubtracted = d %>% flx.subtract_background(blankSamples = c("blank1", "blank2", "blank3", "blank4", "blank_2ndSeq"))
list.corrected = d.backgroundSubtracted %>% flx.correct_natural_abundance()
# combine infusion and sample ID data
func.combine_sample_ID = function(dataset.tidy){
d.tidy = dataset.tidy %>%
mutate(mouse_ID = str_extract(sample, pattern = WRD %R% DIGIT %R% END),
infusion_round = str_extract(sample, START %R% WRD)) %>%
left_join(d.LCMS_sampleInfo, by = c("sample", "infusion_round", "mouse_ID")) %>%
left_join(d.infusion_rounds, by = c("infusion_round", "mouse_ID"))
return(d.tidy)
}
d.normalized.tidy = func.combine_sample_ID(dataset = list.corrected$Normalized %>%
gather(-c(Compound, C_Label), key = sample, value = enrichment) )
d.corrected.tidy = func.combine_sample_ID(dataset = list.corrected$Corrected %>%
gather(-c(Compound, C_Label), key = sample, value = intensity))
listed.tidyData = list(Normalized = d.normalized.tidy %>% filter(tracer == infused.tracer & blood == plotBlood),
Corrected = d.corrected.tidy %>% filter(tracer == infused.tracer & blood == plotBlood))
flx.plot_labeling_enrichment = function(listed.tidyData = listed.tidyData,
compound = NULL,
enrichment_lower_bound = 0,
facet.nrow = 1,
show.TIC = T) {
# Check there is listed data input
if (is.null(listed.tidyData)) {
stop("Please specify the dataset: the output from function \"flx.correct_natural_abundance\", which is in the format of a list.\n\n")
}
# Extract dataset from the list
d.corrected.tidy = listed.tidyData$Corrected
d.normalized.tidy = listed.tidyData$Normalized
cmpd.all = d.corrected.tidy$Compound %>% unique()
# Check there is compound input
if (is.null(compound )) {
stop("A compound name must be specified in the argument of \"compound = ... \" to make a plot.\n ")
}
# Check compound is of length of one
if (length(compound) > 1) {
stop("Please input only one compound in the argument of \"compound = ... \" when making a plot.\n\n")
}
# Check compound matches compound names in the input listed.data
if (! compound %in% cmpd.all) {
stop("Compound", " \"", compound, "\"", " is not found in the input dataset.\n" )
}
# Convert C-label into ordered factor for visualization purpose
ordered.C_label = d.normalized.tidy $ C_Label %>% unique() %>% rev()
d.normalized.tidy$C_Label = factor(d.normalized.tidy $ C_Label, levels = ordered.C_label, ordered = T)
d.corrected.tidy$C_Label = factor(d.corrected.tidy$C_Label, levels = ordered.C_label, ordered = T)
# color setup for C-label: same color assignment rule for all compounds
colors = c ("grey", "firebrick", "yellow", "lightgreen",  "skyblue", "steelblue", "black")  # Specify the first seven colros (M+0, ...M + 6)
colors.more = colorRampPalette(brewer.pal(8, "Dark2"))( (nmax <- d.corrected.tidy$C_Label %>% as.numeric() %>% max()) - length(colors) + 1)
colors = c(colors, colors.more)
names(colors) = 0:nmax %>% factor(ordered = T)
# Select specified compound and tidy up
d.corrected.tidy = d.corrected.tidy %>% filter(Compound == compound)
d.TIC.tidy = d.corrected.tidy %>% group_by(sample, Compound) %>%
summarise(TIC = sum(intensity, na.rm = T),
phenotype = unique(phenotype))
d.normalized.tidy = d.normalized.tidy %>%  filter(Compound == compound)
# max TIC intens.
TIC.max = (d.TIC.tidy)$TIC %>% max(na.rm = T)
# Number of color
C_label.i = d.normalized.tidy$C_Label %>% unique() %>% as.character()
# Define plotting function
theme_set(theme_bw() +
theme(#axis.text.x = element_text(angle = 45, hjust = 1),
strip.background = element_blank(),
strip.text = element_text(size = 14, face = "bold"),
panel.grid = element_blank(),
panel.border = element_rect(colour = "black", size = 1),
axis.text = element_text(colour = "black", size = 11),
title = element_text(face = "bold", hjust = .5, size = 12),
plot.title = element_text(hjust = .5, size = 16),
legend.title = element_blank()) )
# Label fraction bar plot
plt.bar = d.normalized.tidy %>%
ggplot(aes(x = sample)) +
geom_bar(aes(y = enrichment, fill = C_Label, color = C_Label),
stat = "identity", alpha = .8) +
scale_color_manual(values = colors [C_label.i %>% as.character()] ) +
scale_fill_manual(values = colors [C_label.i %>% as.character()] ) +
labs(x = " ", y = "Labelling fraction\n", title = compound)  + # \n increase y axis - text gap
scale_x_discrete(expand = c(0, 0)) +
coord_cartesian(ylim = c(enrichment_lower_bound, 1)) +
scale_y_continuous(expand = c(0, 0),
# Need this right side axis as place holder
sec.axis = sec_axis(~.*TIC.max, name = "Total isotopologues ion counts\n")) +
theme(axis.text.x = element_text(angle = 60, hjust = 1, color = ifelse(show.TIC == F, "black", "white") ),
axis.text.y.right = element_text(color = NA),  # turn off TIC axis text
axis.title.y.right = element_text(colour = NA),
axis.ticks.y.right = element_blank() ) # turn off TIC ticks
# TIC line plot
plt.TIC = d.TIC.tidy %>%
ggplot(aes(x = sample)) +
# set bar plot (transparent) so as to keep the legend as a place holder to allow overlay with real bar plot
geom_bar(aes(y = TIC),
stat = "identity", alpha = 0, color = NA, position = "fill") +
# scale_color_manual(values = colors) +
# scale_fill_manual(values = colors) +
labs(x = " ", y = "Labelling fraction\n", title = compound)  + # \n increase y axis - text gap
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0),
sec.axis = sec_axis(~.*TIC.max, name = "Total isotopologues ion counts\n")) +
theme(panel.background = element_blank(),
# turn on bar plot as place holder for legend, but not show legend here
# so as to show legend of the bar plot
legend.background = element_blank(),
legend.key = element_blank(),
legend.text = element_blank(),
plot.background = element_blank(),
axis.ticks.y.left = element_blank(), # turn off label fraction axis ticks
axis.text.x = element_text(angle = 60, hjust = 1, colour = "black"),
axis.ticks.x = element_blank(),
axis.text.y.left = element_text(colour = NA), # turn off label fraction axis text
axis.title.y.left = element_text(colour = NA) # turn off label fraction axis title
)  +
# TIC counts
geom_point(aes(y = TIC  / TIC.max), fill = "black", color = "white", alpha = 1, size = 3, shape = 23, stroke = 1 )
# geom_line(aes(y = TIC  / TIC.max, group = 1), color = "black", alpha = .5)
# facet
plt.TIC = plt.TIC + facet_wrap( ~ phenotype, scales = "free_x", nrow = facet.nrow) + theme(panel.spacing = unit(1, "lines"))
plt.bar = plt.bar + facet_wrap( ~ phenotype, scales = "free_x", nrow = facet.nrow) + theme(panel.spacing = unit(1, "lines"))
# Overlay and align up the two plots
if (show.TIC == T) {
aligned_plots <- align_plots(plt.bar, plt.TIC, align="hv", axis="tblr")
ggdraw(aligned_plots[[1]]) + draw_plot(aligned_plots[[2]])
} else { return(plt.bar)}
}
flx.plot_labeling_enrichment.which.Tracer.Blood = function(my.infused.tracer = "Glucose",
labeled.compund = "Glucose",
plotBlood = "tail",
enrichment_lower_bound = 0,
showTIC = T){
listed.tidyData = list(Normalized = d.normalized.tidy %>% filter(infused.tracer == my.infused.tracer & blood == plotBlood),
Corrected = d.corrected.tidy %>% filter(infused.tracer == my.infused.tracer & blood == plotBlood))
p = flx.plot_labeling_enrichment(listed.tidyData = listed.tidyData,
compound = labeled.compund,
enrichment_lower_bound = enrichment_lower_bound, show.TIC = showTIC)
plot_grid(ggplot() + theme_void() + ggtitle(paste("Infused tracer: ", my.infused.tracer, "; ", plotBlood, " blood")) +
theme(plot.title = element_text(hjust = .4, face = "bold", size = 15, color = ifelse(plotBlood == "art", "firebrick", "steelblue"))),
p,
rel_heights = c(1, 15), nrow = 2 )
}
#
# flx.plot_labeling_enrichment.which.Tracer.Blood(my.infused.tracer  = "Glucose", labeled.compund = "Glucose",
#                                                 plotBlood = "art", enrichment_lower_bound = .5, showTIC = T)
#
flx.plot_labeling_enrichment.which.Tracer.Blood(my.infused.tracer = "Glucose", labeled.compund = "Glucose",
plotBlood = "art", enrichment_lower_bound = .5)
#
#
getwd()
devtools::load_all()
library(tidyverse)
library(ggbeeswarm)
library(readxl)
library(RColorBrewer)
# Labeling data
path.labeling = "/Users/boyuan/Desktop/Harvard/Research/db db mice/Infusion data/2021_Nov_gluc_lact.xlsm"
path.infusion.surgery = "/Users/boyuan/Desktop/Harvard/Research/db db mice/Infusion data/infusion rounds data.xlsx"
d = read_excel(path.labeling, sheet = "2021_Nov_gluc_lact")
d = d %>% select( - contains("d-")) %>% # remove infusion round d; likely cross contamination of artery blood by tracer residual on the button; ca. 80% labeling in art. blood
select( - contains( "a-tail-d1")) # mouse jumped out of cage and fell from table to floor during infusion; ca. only 5% M+6 glucose labeling, aberrantly low;
d.LCMS_sampleInfo = read_excel(path.labeling, sheet = "sample_info")
d.infusion_rounds = read_excel(path = path.infusion.surgery, sheet = "infusion rounds", skip = 7)
# background subtraction & natural abundance correction
d.backgroundSubtracted = d %>% flx.subtract_background(blankSamples = c("blank1", "blank2", "blank3", "blank4", "blank_2ndSeq"))
list.corrected = d.backgroundSubtracted %>% flx.correct_natural_abundance()
# combine infusion and sample ID data
func.combine_sample_ID = function(dataset.tidy){
d.tidy = dataset.tidy %>%
mutate(mouse_ID = str_extract(sample, pattern = WRD %R% DIGIT %R% END),
infusion_round = str_extract(sample, START %R% WRD)) %>%
left_join(d.LCMS_sampleInfo, by = c("sample", "infusion_round", "mouse_ID")) %>%
left_join(d.infusion_rounds, by = c("infusion_round", "mouse_ID"))
return(d.tidy)
}
d.normalized.tidy = func.combine_sample_ID(dataset = list.corrected$Normalized %>%
gather(-c(Compound, C_Label), key = sample, value = enrichment) )
d.corrected.tidy = func.combine_sample_ID(dataset = list.corrected$Corrected %>%
gather(-c(Compound, C_Label), key = sample, value = intensity))
listed.tidyData = list(Normalized = d.normalized.tidy %>% filter(tracer == infused.tracer & blood == plotBlood),
Corrected = d.corrected.tidy %>% filter(tracer == infused.tracer & blood == plotBlood))
flx.plot_labeling_enrichment = function(listed.tidyData = listed.tidyData,
compound = NULL,
enrichment_lower_bound = 0,
facet.nrow = 1,
show.TIC = T) {
# Check there is listed data input
if (is.null(listed.tidyData)) {
stop("Please specify the dataset: the output from function \"flx.correct_natural_abundance\", which is in the format of a list.\n\n")
}
# Extract dataset from the list
d.corrected.tidy = listed.tidyData$Corrected
d.normalized.tidy = listed.tidyData$Normalized
cmpd.all = d.corrected.tidy$Compound %>% unique()
# Check there is compound input
if (is.null(compound )) {
stop("A compound name must be specified in the argument of \"compound = ... \" to make a plot.\n ")
}
# Check compound is of length of one
if (length(compound) > 1) {
stop("Please input only one compound in the argument of \"compound = ... \" when making a plot.\n\n")
}
# Check compound matches compound names in the input listed.data
if (! compound %in% cmpd.all) {
stop("Compound", " \"", compound, "\"", " is not found in the input dataset.\n" )
}
# Convert C-label into ordered factor for visualization purpose
ordered.C_label = d.normalized.tidy $ C_Label %>% unique() %>% rev()
d.normalized.tidy$C_Label = factor(d.normalized.tidy $ C_Label, levels = ordered.C_label, ordered = T)
d.corrected.tidy$C_Label = factor(d.corrected.tidy$C_Label, levels = ordered.C_label, ordered = T)
# color setup for C-label: same color assignment rule for all compounds
colors = c ("grey", "firebrick", "yellow", "lightgreen",  "skyblue", "steelblue", "black")  # Specify the first seven colros (M+0, ...M + 6)
colors.more = colorRampPalette(brewer.pal(8, "Dark2"))( (nmax <- d.corrected.tidy$C_Label %>% as.numeric() %>% max()) - length(colors) + 1)
colors = c(colors, colors.more)
names(colors) = 0:nmax %>% factor(ordered = T)
# Select specified compound and tidy up
d.corrected.tidy = d.corrected.tidy %>% filter(Compound == compound)
d.TIC.tidy = d.corrected.tidy %>% group_by(sample, Compound) %>%
summarise(TIC = sum(intensity, na.rm = T),
phenotype = unique(phenotype))
d.normalized.tidy = d.normalized.tidy %>%  filter(Compound == compound)
# max TIC intens.
TIC.max = (d.TIC.tidy)$TIC %>% max(na.rm = T)
# Number of color
C_label.i = d.normalized.tidy$C_Label %>% unique() %>% as.character()
# Define plotting function
theme_set(theme_bw() +
theme(#axis.text.x = element_text(angle = 45, hjust = 1),
strip.background = element_blank(),
strip.text = element_text(size = 14, face = "bold"),
panel.grid = element_blank(),
panel.border = element_rect(colour = "black", size = 1),
axis.text = element_text(colour = "black", size = 11),
title = element_text(face = "bold", hjust = .5, size = 12),
plot.title = element_text(hjust = .5, size = 16),
legend.title = element_blank()) )
# Label fraction bar plot
plt.bar = d.normalized.tidy %>%
ggplot(aes(x = sample)) +
geom_bar(aes(y = enrichment, fill = C_Label, color = C_Label),
stat = "identity", alpha = .8) +
scale_color_manual(values = colors [C_label.i %>% as.character()] ) +
scale_fill_manual(values = colors [C_label.i %>% as.character()] ) +
labs(x = " ", y = "Labelling fraction\n", title = compound)  + # \n increase y axis - text gap
scale_x_discrete(expand = c(0, 0)) +
coord_cartesian(ylim = c(enrichment_lower_bound, 1)) +
scale_y_continuous(expand = c(0, 0),
# Need this right side axis as place holder
sec.axis = sec_axis(~.*TIC.max, name = "Total isotopologues ion counts\n")) +
theme(axis.text.x = element_text(angle = 60, hjust = 1, color = ifelse(show.TIC == F, "black", "white") ),
axis.text.y.right = element_text(color = NA),  # turn off TIC axis text
axis.title.y.right = element_text(colour = NA),
axis.ticks.y.right = element_blank() ) # turn off TIC ticks
# TIC line plot
plt.TIC = d.TIC.tidy %>%
ggplot(aes(x = sample)) +
# set bar plot (transparent) so as to keep the legend as a place holder to allow overlay with real bar plot
geom_bar(aes(y = TIC),
stat = "identity", alpha = 0, color = NA, position = "fill") +
# scale_color_manual(values = colors) +
# scale_fill_manual(values = colors) +
labs(x = " ", y = "Labelling fraction\n", title = compound)  + # \n increase y axis - text gap
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0),
sec.axis = sec_axis(~.*TIC.max, name = "Total isotopologues ion counts\n")) +
theme(panel.background = element_blank(),
# turn on bar plot as place holder for legend, but not show legend here
# so as to show legend of the bar plot
legend.background = element_blank(),
legend.key = element_blank(),
legend.text = element_blank(),
plot.background = element_blank(),
axis.ticks.y.left = element_blank(), # turn off label fraction axis ticks
axis.text.x = element_text(angle = 60, hjust = 1, colour = "black"),
axis.ticks.x = element_blank(),
axis.text.y.left = element_text(colour = NA), # turn off label fraction axis text
axis.title.y.left = element_text(colour = NA) # turn off label fraction axis title
)  +
# TIC counts
geom_point(aes(y = TIC  / TIC.max), fill = "black", color = "white", alpha = 1, size = 3, shape = 23, stroke = 1 )
# geom_line(aes(y = TIC  / TIC.max, group = 1), color = "black", alpha = .5)
# facet
plt.TIC = plt.TIC + facet_wrap( ~ phenotype, scales = "free_x", nrow = facet.nrow) + theme(panel.spacing = unit(1, "lines"))
plt.bar = plt.bar + facet_wrap( ~ phenotype, scales = "free_x", nrow = facet.nrow) + theme(panel.spacing = unit(1, "lines"))
# Overlay and align up the two plots
if (show.TIC == T) {
aligned_plots <- align_plots(plt.bar, plt.TIC, align="hv", axis="tblr")
ggdraw(aligned_plots[[1]]) + draw_plot(aligned_plots[[2]])
} else { return(plt.bar)}
}
flx.plot_labeling_enrichment.which.Tracer.Blood = function(my.infused.tracer = "Glucose",
labeled.compund = "Glucose",
plotBlood = "tail",
enrichment_lower_bound = 0,
showTIC = T){
listed.tidyData = list(Normalized = d.normalized.tidy %>% filter(infused.tracer == my.infused.tracer & blood == plotBlood),
Corrected = d.corrected.tidy %>% filter(infused.tracer == my.infused.tracer & blood == plotBlood))
p = flx.plot_labeling_enrichment(listed.tidyData = listed.tidyData,
compound = labeled.compund,
enrichment_lower_bound = enrichment_lower_bound, show.TIC = showTIC)
plot_grid(ggplot() + theme_void() + ggtitle(paste("Infused tracer: ", my.infused.tracer, "; ", plotBlood, " blood")) +
theme(plot.title = element_text(hjust = .4, face = "bold", size = 15, color = ifelse(plotBlood == "art", "firebrick", "steelblue"))),
p,
rel_heights = c(1, 15), nrow = 2 )
}
#
# flx.plot_labeling_enrichment.which.Tracer.Blood(my.infused.tracer  = "Glucose", labeled.compund = "Glucose",
#                                                 plotBlood = "art", enrichment_lower_bound = .5, showTIC = T)
#
flx.plot_labeling_enrichment.which.Tracer.Blood(my.infused.tracer = "Glucose", labeled.compund = "Glucose",
plotBlood = "art", enrichment_lower_bound = .5)
#
#
#
# flx.plot_labeling_enrichment.which.Tracer.Blood(my.infused.tracer  = "Glucose", labeled.compund = "Glucose",
#                                                 plotBlood = "art", enrichment_lower_bound = .5, showTIC = T)
#
flx.plot_labeling_enrichment.which.Tracer.Blood(my.infused.tracer = "Glucose", labeled.compund = "Glucose",
plotBlood = "art", enrichment_lower_bound = .5)
#
#
# flx.plot_labeling_enrichment.which.Tracer.Blood(my.infused.tracer  = "Glucose", labeled.compund = "Glutamine",
#                                                 plotBlood = "tail", enrichment_lower_bound = .5, showTIC = T)
#
flx.plot_labeling_enrichment.which.Tracer.Blood(my.infused.tracer = "Lactate", labeled.compund = "Lactate",
plotBlood = "art", enrichment_lower_bound = .5)
flx.plot_labeling_enrichment.which.Tracer.Blood(my.infused.tracer = "Lactate", labeled.compund = "Glucose",
plotBlood = "art", enrichment_lower_bound = .5)
getwd()
